{"ast":null,"code":"var _jsxFileName = \"D:\\\\gabriel_grezzana\\\\amz_polly\\\\src\\\\component\\\\polly.tsx\",\n  _s = $RefreshSig$();\n// src/TextToSpeech.tsx\nimport React, { useState } from \"react\";\nimport { polly } from \"../aws-config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TextToSpeech = () => {\n  _s();\n  const [text, setText] = useState(\"\");\n  const [audioUrl, setAudioUrl] = useState(\"\");\n  const handleTextChange = event => {\n    setText(event.target.value);\n  };\n  const handleGenerateVoice = async () => {\n    const params = {\n      Text: text,\n      OutputFormat: \"mp3\",\n      VoiceId: \"Joanna\" // escolha a voz que você deseja usar\n    };\n    try {\n      const data = await polly.synthesizeSpeech(params).promise();\n      if (data.AudioStream) {\n        // Se AudioStream for uma string binária, decodificamos\n        const audioStream = data.AudioStream; // Isso pode ser um Buffer ou string\n        const binaryString = typeof audioStream === \"string\" ? atob(audioStream) : audioStream.toString(\"latin1\"); // Decodifica a string binária\n        const len = binaryString.length;\n        const bytes = new Uint8Array(len);\n        for (let i = 0; i < len; i++) {\n          bytes[i] = binaryString.charCodeAt(i);\n        }\n        const audioBlob = new Blob([bytes], {\n          type: \"audio/mp3\"\n        });\n        const url = URL.createObjectURL(audioBlob);\n        setAudioUrl(url);\n      }\n    } catch (error) {\n      console.error(\"Erro ao gerar voz:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Text to Speech\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: text,\n      onChange: handleTextChange,\n      rows: 4,\n      cols: 50\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGenerateVoice,\n      children: \"Gerar Voz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), audioUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Ou\\xE7a a Voz:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        controls: true,\n        src: audioUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(TextToSpeech, \"hEQ+ZUu8NJQpgzHGu7UelqqS2V4=\");\n_c = TextToSpeech;\nexport default TextToSpeech;\nvar _c;\n$RefreshReg$(_c, \"TextToSpeech\");","map":{"version":3,"names":["React","useState","polly","jsxDEV","_jsxDEV","TextToSpeech","_s","text","setText","audioUrl","setAudioUrl","handleTextChange","event","target","value","handleGenerateVoice","params","Text","OutputFormat","VoiceId","data","synthesizeSpeech","promise","AudioStream","audioStream","binaryString","atob","toString","len","length","bytes","Uint8Array","i","charCodeAt","audioBlob","Blob","type","url","URL","createObjectURL","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","rows","cols","onClick","controls","src","_c","$RefreshReg$"],"sources":["D:/gabriel_grezzana/amz_polly/src/component/polly.tsx"],"sourcesContent":["// src/TextToSpeech.tsx\r\nimport React, { useState } from \"react\";\r\nimport { polly } from \"../aws-config\";\r\n\r\nconst TextToSpeech: React.FC = () => {\r\n  const [text, setText] = useState(\"\");\r\n  const [audioUrl, setAudioUrl] = useState(\"\");\r\n\r\n  const handleTextChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleGenerateVoice = async () => {\r\n    const params = {\r\n      Text: text,\r\n      OutputFormat: \"mp3\",\r\n      VoiceId: \"Joanna\", // escolha a voz que você deseja usar\r\n    };\r\n\r\n    try {\r\n      const data = await polly.synthesizeSpeech(params).promise();\r\n      if (data.AudioStream) {\r\n        // Se AudioStream for uma string binária, decodificamos\r\n        const audioStream = data.AudioStream; // Isso pode ser um Buffer ou string\r\n        const binaryString =\r\n          typeof audioStream === \"string\"\r\n            ? atob(audioStream)\r\n            : audioStream.toString(\"latin1\"); // Decodifica a string binária\r\n        const len = binaryString.length;\r\n        const bytes = new Uint8Array(len);\r\n\r\n        for (let i = 0; i < len; i++) {\r\n          bytes[i] = binaryString.charCodeAt(i);\r\n        }\r\n\r\n        const audioBlob = new Blob([bytes], { type: \"audio/mp3\" });\r\n        const url = URL.createObjectURL(audioBlob);\r\n        setAudioUrl(url);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Erro ao gerar voz:\", error);\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <h1>Text to Speech</h1>\r\n      <textarea value={text} onChange={handleTextChange} rows={4} cols={50} />\r\n      <br />\r\n      <button onClick={handleGenerateVoice}>Gerar Voz</button>\r\n      {audioUrl && (\r\n        <div>\r\n          <h2>Ouça a Voz:</h2>\r\n          <audio controls src={audioUrl} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextToSpeech;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}